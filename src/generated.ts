// Generated by @wagmi/cli@1.1.0 on 7/23/2023 at 10:19:42â€¯AM
import {
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  useContractRead,
  UseContractReadConfig,
} from 'wagmi'
import {
  WriteContractMode,
  PrepareWriteContractResult,
  ReadContractResult,
} from 'wagmi/actions'

import {
  getContract,
  GetContractArgs,
  writeContract,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
  watchContractEvent,
  WatchContractEventConfig,
  WatchContractEventCallback,
  readContract,
  ReadContractConfig,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Batch
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const batchABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SubcallFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SubcallSucceeded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address[]', type: 'address[]' },
      { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'callData', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'gasLimit', internalType: 'uint64[]', type: 'uint64[]' },
    ],
    name: 'batchAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address[]', type: 'address[]' },
      { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'callData', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'gasLimit', internalType: 'uint64[]', type: 'uint64[]' },
    ],
    name: 'batchSome',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address[]', type: 'address[]' },
      { name: 'value', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'callData', internalType: 'bytes[]', type: 'bytes[]' },
      { name: 'gasLimit', internalType: 'uint64[]', type: 'uint64[]' },
    ],
    name: 'batchSomeUntilFailure',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LuckyNumber
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const luckyNumberABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'numbers', internalType: 'uint8[]', type: 'uint8[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'buyTickets',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Multicall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multicall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct Multicall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct Multicall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchABI}__.
 */
export function useBatchWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof batchABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof batchABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof batchABI, TFunctionName, TMode>({
    abi: batchABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchABI}__ and `functionName` set to `"batchAll"`.
 */
export function useBatchBatchAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof batchABI,
          'batchAll'
        >['request']['abi'],
        'batchAll',
        TMode
      > & { functionName?: 'batchAll' }
    : UseContractWriteConfig<typeof batchABI, 'batchAll', TMode> & {
        abi?: never
        functionName?: 'batchAll'
      } = {} as any,
) {
  return useContractWrite<typeof batchABI, 'batchAll', TMode>({
    abi: batchABI,
    functionName: 'batchAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchABI}__ and `functionName` set to `"batchSome"`.
 */
export function useBatchBatchSome<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof batchABI,
          'batchSome'
        >['request']['abi'],
        'batchSome',
        TMode
      > & { functionName?: 'batchSome' }
    : UseContractWriteConfig<typeof batchABI, 'batchSome', TMode> & {
        abi?: never
        functionName?: 'batchSome'
      } = {} as any,
) {
  return useContractWrite<typeof batchABI, 'batchSome', TMode>({
    abi: batchABI,
    functionName: 'batchSome',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link batchABI}__ and `functionName` set to `"batchSomeUntilFailure"`.
 */
export function useBatchBatchSomeUntilFailure<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof batchABI,
          'batchSomeUntilFailure'
        >['request']['abi'],
        'batchSomeUntilFailure',
        TMode
      > & { functionName?: 'batchSomeUntilFailure' }
    : UseContractWriteConfig<
        typeof batchABI,
        'batchSomeUntilFailure',
        TMode
      > & {
        abi?: never
        functionName?: 'batchSomeUntilFailure'
      } = {} as any,
) {
  return useContractWrite<typeof batchABI, 'batchSomeUntilFailure', TMode>({
    abi: batchABI,
    functionName: 'batchSomeUntilFailure',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchABI}__.
 */
export function usePrepareBatchWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchABI}__ and `functionName` set to `"batchAll"`.
 */
export function usePrepareBatchBatchAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchABI, 'batchAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchABI,
    functionName: 'batchAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchABI, 'batchAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchABI}__ and `functionName` set to `"batchSome"`.
 */
export function usePrepareBatchBatchSome(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchABI, 'batchSome'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchABI,
    functionName: 'batchSome',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchABI, 'batchSome'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link batchABI}__ and `functionName` set to `"batchSomeUntilFailure"`.
 */
export function usePrepareBatchBatchSomeUntilFailure(
  config: Omit<
    UsePrepareContractWriteConfig<typeof batchABI, 'batchSomeUntilFailure'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: batchABI,
    functionName: 'batchSomeUntilFailure',
    ...config,
  } as UsePrepareContractWriteConfig<typeof batchABI, 'batchSomeUntilFailure'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchABI}__.
 */
export function useBatchEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof batchABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: batchABI,
    ...config,
  } as UseContractEventConfig<typeof batchABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchABI}__ and `eventName` set to `"SubcallFailed"`.
 */
export function useBatchSubcallFailedEvent(
  config: Omit<
    UseContractEventConfig<typeof batchABI, 'SubcallFailed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: batchABI,
    eventName: 'SubcallFailed',
    ...config,
  } as UseContractEventConfig<typeof batchABI, 'SubcallFailed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link batchABI}__ and `eventName` set to `"SubcallSucceeded"`.
 */
export function useBatchSubcallSucceededEvent(
  config: Omit<
    UseContractEventConfig<typeof batchABI, 'SubcallSucceeded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: batchABI,
    eventName: 'SubcallSucceeded',
    ...config,
  } as UseContractEventConfig<typeof batchABI, 'SubcallSucceeded'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link luckyNumberABI}__.
 */
export function useLuckyNumberWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof luckyNumberABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof luckyNumberABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof luckyNumberABI, TFunctionName, TMode>({
    abi: luckyNumberABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link luckyNumberABI}__ and `functionName` set to `"buyTickets"`.
 */
export function useLuckyNumberBuyTickets<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof luckyNumberABI,
          'buyTickets'
        >['request']['abi'],
        'buyTickets',
        TMode
      > & { functionName?: 'buyTickets' }
    : UseContractWriteConfig<typeof luckyNumberABI, 'buyTickets', TMode> & {
        abi?: never
        functionName?: 'buyTickets'
      } = {} as any,
) {
  return useContractWrite<typeof luckyNumberABI, 'buyTickets', TMode>({
    abi: luckyNumberABI,
    functionName: 'buyTickets',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link luckyNumberABI}__.
 */
export function usePrepareLuckyNumberWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof luckyNumberABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: luckyNumberABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof luckyNumberABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link luckyNumberABI}__ and `functionName` set to `"buyTickets"`.
 */
export function usePrepareLuckyNumberBuyTickets(
  config: Omit<
    UsePrepareContractWriteConfig<typeof luckyNumberABI, 'buyTickets'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: luckyNumberABI,
    functionName: 'buyTickets',
    ...config,
  } as UsePrepareContractWriteConfig<typeof luckyNumberABI, 'buyTickets'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function useMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useMulticall3GetBasefee<
  TFunctionName extends 'getBasefee',
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useMulticall3GetBlockHash<
  TFunctionName extends 'getBlockHash',
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useMulticall3GetBlockNumber<
  TFunctionName extends 'getBlockNumber',
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useMulticall3GetChainId<
  TFunctionName extends 'getChainId',
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends 'getCurrentBlockCoinbase',
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends 'getCurrentBlockDifficulty',
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends 'getCurrentBlockGasLimit',
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends 'getCurrentBlockTimestamp',
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useMulticall3GetEthBalance<
  TFunctionName extends 'getEthBalance',
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useMulticall3GetLastBlockHash<
  TFunctionName extends 'getLastBlockHash',
  TSelectData = ReadContractResult<typeof multicall3ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multicall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<typeof multicall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function useMulticall3Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multicall3ABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof multicall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof multicall3ABI, TFunctionName, TMode>({
    abi: multicall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useMulticall3Aggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multicall3ABI,
          'aggregate'
        >['request']['abi'],
        'aggregate',
        TMode
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<typeof multicall3ABI, 'aggregate', TMode> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<typeof multicall3ABI, 'aggregate', TMode>({
    abi: multicall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useMulticall3Aggregate3<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multicall3ABI,
          'aggregate3'
        >['request']['abi'],
        'aggregate3',
        TMode
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<typeof multicall3ABI, 'aggregate3', TMode> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<typeof multicall3ABI, 'aggregate3', TMode>({
    abi: multicall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useMulticall3Aggregate3Value<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multicall3ABI,
          'aggregate3Value'
        >['request']['abi'],
        'aggregate3Value',
        TMode
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<typeof multicall3ABI, 'aggregate3Value', TMode> & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<typeof multicall3ABI, 'aggregate3Value', TMode>({
    abi: multicall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useMulticall3BlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multicall3ABI,
          'blockAndAggregate'
        >['request']['abi'],
        'blockAndAggregate',
        TMode
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        typeof multicall3ABI,
        'blockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof multicall3ABI, 'blockAndAggregate', TMode>({
    abi: multicall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useMulticall3TryAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multicall3ABI,
          'tryAggregate'
        >['request']['abi'],
        'tryAggregate',
        TMode
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<typeof multicall3ABI, 'tryAggregate', TMode> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof multicall3ABI, 'tryAggregate', TMode>({
    abi: multicall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multicall3ABI,
          'tryBlockAndAggregate'
        >['request']['abi'],
        'tryBlockAndAggregate',
        TMode
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        typeof multicall3ABI,
        'tryBlockAndAggregate',
        TMode
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<typeof multicall3ABI, 'tryBlockAndAggregate', TMode>({
    abi: multicall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function usePrepareMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, 'blockAndAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicall3ABI, 'tryBlockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multicall3ABI,
    'tryBlockAndAggregate'
  >)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link batchABI}__.
 */
export function getBatch(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: batchABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link batchABI}__.
 */
export function writeBatch<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof batchABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof batchABI, TFunctionName>, 'abi'>,
) {
  return writeContract({
    abi: batchABI,
    ...config,
  } as unknown as WriteContractArgs<typeof batchABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link batchABI}__.
 */
export function prepareWriteBatch<
  TAbi extends readonly unknown[] = typeof batchABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: batchABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link batchABI}__.
 */
export function watchBatchEvent<
  TAbi extends readonly unknown[] = typeof batchABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: batchABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link luckyNumberABI}__.
 */
export function getLuckyNumber(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: luckyNumberABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link luckyNumberABI}__.
 */
export function writeLuckyNumber<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof luckyNumberABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof luckyNumberABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: luckyNumberABI,
    ...config,
  } as unknown as WriteContractArgs<typeof luckyNumberABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link luckyNumberABI}__.
 */
export function prepareWriteLuckyNumber<
  TAbi extends readonly unknown[] = typeof luckyNumberABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: luckyNumberABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function getMulticall3(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: multicall3ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function readMulticall3<
  TAbi extends readonly unknown[] = typeof multicall3ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: multicall3ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function writeMulticall3<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof multicall3ABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof multicall3ABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: multicall3ABI,
    ...config,
  } as unknown as WriteContractArgs<typeof multicall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link multicall3ABI}__.
 */
export function prepareWriteMulticall3<
  TAbi extends readonly unknown[] = typeof multicall3ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: multicall3ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}
